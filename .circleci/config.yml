version: 2.1

commands:
  # destroy AWS environments when create fail
   destroy-environments:
      description: Destroy front-end cloudformation stacks given a workflow ID.
      parameters:
         workflow_id:
             type: string 
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              echo "Destroying environment: <<parameters.workflow_id>> "
              aws s3 rm s3://helloworld-<<parameters.workflow_id>> --recursive
              aws cloudformation delete-stack --stack-name helloworld-frontend-<<parameters.workflow_id>>

jobs:              
   test-frontend:
      docker: 
         - image: python:3.7.3-stretch
      steps:
         - checkout # checkout source code from git
         - run:
             name: Install dependencies
             command: |
               cd HelloWorld
               make install
         - run:
             name: check lint
             command: |
               cd HelloWorld
               make lint

   docker-build:
      docker:
         - image: cimg/go:1.17
      working_directory: ~/repo
      steps:
         - checkout
         - setup_remote_docker:
            version: 20.10.14
            docker_layer_caching: true
         - run:
            name: build and tag docker hub
            command: |
               cd HelloWorld
               # login
               docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
               # build image
               docker build -t helloworld:${CIRCLE_WORKFLOW_ID:0:7} .
               # list image
               docker images
               # push to DockerHub
               docker tag helloworld:${CIRCLE_WORKFLOW_ID:0:7} ${DOCKERHUB_USERNAME}/helloworld:${CIRCLE_WORKFLOW_ID:0:7}
               docker push ${DOCKERHUB_USERNAME}/helloworld:${CIRCLE_WORKFLOW_ID:0:7}

   deploy-infrastructure:
      docker:
         - image: amazon/aws-cli
      working_directory: ~/repo
      steps:
         - checkout # checkout source code from git
         - run:
            name: Ensure front-end infrastructure exist
            command: |
               aws cloudformation deploy \
               --template-file .circleci/cloudFormations/frontend.yml \
               --stack-name "helloworld-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=helloworld \
         - destroy-environments:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
          
   deploy-frontend:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout # checkout source code from git
         - run:
            name: Deploy frontend objects
            command: |
               aws s3 cp ./HelloWorld s3://helloworld-${CIRCLE_WORKFLOW_ID:0:7} --exclude "*" --include "index.html" --recursive
         - destroy-environments:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            
   smoke-test:
      docker:
         - image: python:3.7-alpine3.11
      steps:
         - checkout # checkout source code from git
         - run:
            name: Install dependencies
            command: |
              apk --no-cache add curl
         - run:
            name: Frontend smoke test.
            command: |
              URL="http://helloworld-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/"            
              if curl -s ${URL} | grep "Hello World"
              then
                return 0
              else
                return 1
              fi
         - destroy-environments:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            
   cloudfront-update:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout # checkout source code from git
         - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
              --template-file .circleci/cloudFormations/cloudfront.yml \
              --stack-name "helloworld-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=helloworld            
         - destroy-environments:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

   cleanup:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout # checkout source code from git
         - run:
            name: Get old stacks & delete by workflow id
            command: |          
              # Fetch the stack names          
              STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"        
              # Remove old stacks and files
              for stackitem in ${STACKS[@]}
              do
                if [[ ! $stackitem =~ .*"${CIRCLE_WORKFLOW_ID:0:7}".* ]]
                then
                  echo "--------------- CLEAN OLD INFRASTRUCTURE ---------------"
                  unset OldWorkflowID
                  OldWorkflowID=$(echo $stackitem | sed -r 's/helloworld-.*-//g')
                  echo "--------------- ${OldWorkflowID} ---------------"
                  
                else
                  echo "--------------- CANNOT DELETE CURRENT STACK ${stackitem} ---------------"
                fi
              done
            
workflows:
  default:
    jobs:
#      - test-frontend
#      - docker-build:
#          requires: [test-frontend]
#          filters:
#            branches:
#              only: [main]
#      - deploy-infrastructure:
#          requires: [docker-build]
#      - deploy-frontend:
#          requires: [deploy-infrastructure]    
#      - smoke-test:
#          requires: [deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
      - cleanup
#          requires: [cloudfront-update]